-- globals:
--
--  warn: s => ()
--  err: s => ()
--  duration: float [seconds] :: [0,+inf)
--  grid: BattleGrid

-- @return success_flag: bool
function start()
  log("TODO: Make async?")
  warn("TODO: Get ref to Tackle: AnimatedSprite")

  return true
end

-- source: CellData
-- @return cells: { {x: int, y: int} }
function get_candidate_cells(source)
  -- local cell = source.cell
  -- print(cell)

  -- local i = cell.x
  -- local j = cell.y

  warn("TODO: Filter cells that collide with wall")
  warn("TODO: Helper function for these types of constructs")

  --  => addv(vec2 a, vec2 b) -> vec2
  --  => zip(addv, [vec2] as, [vec2] bs) -> [vec2]
  --  => can_access(BattleGrid grid, [i,j] source, [i,j] target) -> bool
  --  => filter(can_access, ...)
  return {
    -- { x = i - 1, y = j + 1 },
    -- { x = i    , y = j + 1 },
    -- { x = i + 1, y = j + 1 },
    -- { x = i - 1, y = j - 1 },
    -- { x = i + 1, y = j + 1 }
  }
end

-- @params
--  source: CellData
-- @return void
function before_animation(source)
  warn("TODO: Store actor's original position")

end

-- @params
--  source: CellData
-- @return void
function after_animation(source)
  warn("TODO: Set actor position to its original position")

end

-- @params
--  source: CellData
--  target: CellData
--  t: float :: [0,1]
-- @return void
function animate(source, target, t)
  print("TODO: Helper function for procedural animations\n" ..
        "      such as 'hurt', 'death', 'heal', etc.")

end